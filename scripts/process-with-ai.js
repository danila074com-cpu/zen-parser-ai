// scripts/process-with-ai.js - –≠–¢–ò–ß–ù–ê–Ø AI –û–ë–†–ê–ë–û–¢–ö–ê
const { OpenAI } = require('openai');
const fs = require('fs').promises;
const path = require('path');
const ExcelJS = require('exceljs');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

const AI_MODEL = "gpt-3.5-turbo";

console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≠–¢–ò–ß–ù–£–Æ AI –æ–±—Ä–∞–±–æ—Ç–∫—É...');

async function processArticles() {
  try {
    if (!process.env.OPENAI_API_KEY) {
      console.log('‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }

    const inputPath = path.join(__dirname, '../results/–°—Ç–∞—Ç—å–∏ –î–∑–µ–Ω/–ù–∞—Ä–æ—á–Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—à—å/–ù–∞—Ä–æ—á–Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—à—å_articles.xlsx');
    
    console.log('üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç—å—è–º–∏...');
    await fs.access(inputPath);
    console.log('‚úÖ –§–∞–π–ª —Å–æ —Å—Ç–∞—Ç—å–µ–π –Ω–∞–π–¥–µ–Ω!');

    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(inputPath);
    const worksheet = workbook.getWorksheet('Articles');
    const totalArticles = worksheet.rowCount - 1;
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${totalArticles}`);

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const outputDir = path.join(__dirname, '../processed');
    await fs.mkdir(outputDir, { recursive: true });
    const outputPath = path.join(outputDir, '—ç—Ç–∏—á–Ω—ã–µ_—Å—Ç–∞—Ç—å–∏.xlsx');
    
    const newWorkbook = new ExcelJS.Workbook();
    const newWorksheet = newWorkbook.addWorksheet('–≠—Ç–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏');

    // –°—Ç–æ–ª–±—Ü—ã
    newWorksheet.columns = [
      { header: '‚Ññ', key: 'number', width: 5 },
      { header: '–¢–µ–º–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞', key: 'original_topic', width: 40 },
      { header: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', key: 'unique_title', width: 40 },
      { header: '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç', key: 'original_text', width: 80 },
      { header: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç', key: 'unique_text', width: 80 },
      { header: '–û—Ä–∏–≥. —Å–ª–æ–≤', key: 'original_words', width: 12 },
      { header: '–£–Ω–∏–∫. —Å–ª–æ–≤', key: 'unique_words', width: 12 },
      { header: '–°—Ç–∞—Ç—É—Å', key: 'status', width: 20 }
    ];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 1 —Å—Ç–∞—Ç—å—é
    let processedCount = 0;
    const maxArticles = 1;

    for (let i = 2; i <= Math.min(worksheet.rowCount, maxArticles + 1); i++) {
      const row = worksheet.getRow(i);
      const originalTitle = row.getCell(1).value;
      const originalText = row.getCell(2).value;
      
      if (!originalTitle || !originalText) continue;

      const originalWordCount = originalText.split(/\s+/).length;
      console.log(`\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—É: "${originalTitle.substring(0, 50)}..."`);

      try {
        // –®–ê–ì 1: –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –¢–ï–ú–£ (–±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞)
        console.log('   üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É...');
        
        const analysisPrompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≠–¢–£ –¢–ï–ú–£ –∏ –≤—ã–¥–µ–ª–∏ –û–°–ù–û–í–ù–£–Æ –ò–î–ï–Æ. –ù–ï –∫–æ–ø–∏—Ä—É–π —Ç–µ–∫—Å—Ç!

–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: "${originalTitle}"
–¢–µ–∫—Å—Ç: "${originalText.substring(0, 500)}..."

–í—ã–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ:
1. –û—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã/–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
3. –¶–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é

–ù–ï –ü–ï–†–ï–°–ö–ê–ó–´–í–ê–ô –¢–ï–ö–°–¢! –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ —Ç–µ–º—ã.
`;

        const analysisResponse = await openai.chat.completions.create({
          model: AI_MODEL,
          messages: [{ role: "user", content: analysisPrompt }],
          max_tokens: 300,
          temperature: 0.3
        });

        const topicAnalysis = analysisResponse.choices[0].message.content;
        console.log('   üéØ –¢–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞:', topicAnalysis.substring(0, 100) + '...');

        // –®–ê–ì 2: –°–û–ó–î–ê–ï–ú –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ù–¢ –ù–ê –û–°–ù–û–í–ï –¢–ï–ú–´
        console.log('   ‚úçÔ∏è –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...');
        
        const creationPrompt = `
–°–û–ó–î–ê–ô –ü–û–õ–ù–û–°–¢–¨–Æ –£–ù–ò–ö–ê–õ–¨–ù–£–Æ –°–¢–ê–¢–¨–Æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π —Ç–µ–º—ã.

–¢–ï–ú–ê –î–õ–Ø –í–î–û–•–ù–û–í–ï–ù–ò–Ø:
${topicAnalysis}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –°–û–ó–î–ê–ô –°–û–í–ï–†–®–ï–ù–ù–û –ù–û–í–´–ô –¢–ï–ö–°–¢ —Å –¥—Ä—É–≥–∏–º —Å—é–∂–µ—Ç–æ–º, –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏, –¥–∏–∞–ª–æ–≥–∞–º–∏
- –°–æ—Ö—Ä–∞–Ω–∏ —Ç–æ–ª—å–∫–æ –û–ë–©–£–Æ –¢–ï–ú–ê–¢–ò–ö–£ (—Å–µ–º–µ–π–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ —Ç.–¥.)
- –û–±—ä–µ–º: ${originalWordCount} ¬±15% —Å–ª–æ–≤
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è
- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞, –ª–æ–∫–∞—Ü–∏–∏, —Å–∏—Ç—É–∞—Ü–∏–∏

–ù–ï –ö–û–ü–ò–†–£–ô –∏ –ù–ï –ü–ï–†–ï–°–ö–ê–ó–´–í–ê–ô –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª! –°–æ–∑–¥–∞–≤–∞–π —Å –Ω—É–ª—è.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
2. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
`;

        const creationResponse = await openai.chat.completions.create({
          model: AI_MODEL,
          messages: [{ role: "user", content: creationPrompt }],
          max_tokens: 4000,
          temperature: 0.9  // –í—ã—Å–æ–∫–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
        });

        const result = creationResponse.choices[0].message.content;
        
        // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç
        const lines = result.split('\n').filter(line => line.trim());
        const uniqueTitle = lines[0].replace(/["']/g, '').trim();
        const uniqueText = lines.slice(1).join('\n').trim();
        
        const uniqueWordCount = uniqueText.split(/\s+/).length;

        console.log(`   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${originalWordCount} ‚Üí ${uniqueWordCount} —Å–ª–æ–≤`);
        console.log(`   üéØ –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${uniqueTitle}`);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        newWorksheet.addRow({
          number: i - 1,
          original_topic: originalTitle,
          unique_title: uniqueTitle,
          original_text: originalText.substring(0, 1000) + (originalText.length > 1000 ? '...' : ''),
          unique_text: uniqueText,
          original_words: originalWordCount,
          unique_words: uniqueWordCount,
          status: '‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'
        });

        processedCount++;
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –°–æ–∑–¥–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.`);

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 3000));

      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await newWorkbook.xlsx.writeFile(outputPath);
    
    console.log('\nüéâ ====== –≠–¢–ò–ß–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ======');
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${processedCount}`);
    console.log(`üìÅ –§–∞–π–ª: ${outputPath}`);
    console.log(`‚úÖ –í—Å–µ —Å—Ç–∞—Ç—å–∏ - –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ù–¢ (–Ω–µ –∫–æ–ø–∏—Ä–∞–π—Ç)`);

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
processArticles();