// scripts/process-with-ai.js - –ü–û–õ–ù–ê–Ø AI –û–ë–†–ê–ë–û–¢–ö–ê
const { OpenAI } = require('openai');
const fs = require('fs').promises;
const path = require('path');
const ExcelJS = require('exceljs');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI (–∫–ª—é—á –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// –í—ã–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏—é ChatGPT
const AI_MODEL = "gpt-3.5-turbo";

console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ü–û–õ–ù–£–Æ AI –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç–µ–π...');
console.log(`ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: ${AI_MODEL}`);

async function processArticles() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if (!process.env.OPENAI_API_KEY) {
      console.log('‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      console.log('üí° –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å:');
      console.log('   OPENAI_API_KEY="—Ç–≤–æ–π-–∫–ª—é—á" node scripts/process-with-ai.js');
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
    const inputPath = path.join(__dirname, '../results/–°—Ç–∞—Ç—å–∏ –î–∑–µ–Ω/–ù–∞—Ä–æ—á–Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—à—å/–ù–∞—Ä–æ—á–Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—à—å_articles.xlsx');
    
    console.log('üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç—å—è–º–∏...');
    
    try {
      await fs.access(inputPath);
      console.log('‚úÖ –§–∞–π–ª —Å–æ —Å—Ç–∞—Ç—å–µ–π –Ω–∞–π–¥–µ–Ω!');
    } catch (error) {
      console.log('‚ùå –§–∞–π–ª —Å–æ —Å—Ç–∞—Ç—å—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä:');
      console.log('   node parser.js');
      return;
    }

    // 3. –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(inputPath);
    
    const worksheet = workbook.getWorksheet('Articles');
    const totalArticles = worksheet.rowCount - 1;
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${totalArticles}`);

    // 4. –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const outputDir = path.join(__dirname, '../processed');
    await fs.mkdir(outputDir, { recursive: true });
    
    const outputPath = path.join(outputDir, '—É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_—Å—Ç–∞—Ç—å–∏.xlsx');
    const newWorkbook = new ExcelJS.Workbook();
    const newWorksheet = newWorkbook.addWorksheet('AI –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏');

    // 5. –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    newWorksheet.columns = [
      { header: '‚Ññ', key: 'number', width: 5 },
      { header: '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', key: 'original_title', width: 35 },
      { header: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', key: 'unique_title', width: 35 },
      { header: '–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã', key: 'themes', width: 25 },
      { header: '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', key: 'tone', width: 15 },
      { header: '–û—Ä–∏–≥. –æ–±—ä–µ–º (—Å–ª–æ–≤)', key: 'original_words', width: 18 },
      { header: '–£–Ω–∏–∫. –æ–±—ä–µ–º (—Å–ª–æ–≤)', key: 'unique_words', width: 18 },
      { header: '–°—Ç–∞—Ç—É—Å', key: 'status', width: 20 }
    ];

    // 6. –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –°–¢–ê–¢–¨–ò –ß–ï–†–ï–ó AI
    let processedCount = 0;
    let failedCount = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 1 —Å—Ç–∞—Ç—å—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ (—ç–∫–æ–Ω–æ–º–∏—è –¥–µ–Ω–µ–≥)
    const maxArticles = 1;

    for (let i = 2; i <= Math.min(worksheet.rowCount, maxArticles + 1); i++) {
      const row = worksheet.getRow(i);
      const originalTitle = row.getCell(1).value;
      const originalText = row.getCell(2).value;
      
      if (!originalTitle || !originalText) continue;

      const originalWordCount = originalText.split(/\s+/).length;
      console.log(`\nüîç [${i-1}/${maxArticles}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: "${originalTitle.substring(0, 40)}..."`);
      console.log(`   üìä –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: ${originalWordCount} —Å–ª–æ–≤`);

      try {
        // –®–ê–ì 1: –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ—Ä–µ–∑ AI
        console.log('   üí° –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫...');
        
        const titlePrompt = `
–ü—Ä–∏–¥—É–º–∞–π –Ω–æ–≤—ã–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏. 
–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç—É –∂–µ —Å—É—Ç—å.

–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: "${originalTitle}"

–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:
        `;

        const titleResponse = await openai.chat.completions.create({
          model: AI_MODEL,
          messages: [{ role: "user", content: titlePrompt }],
          max_tokens: 100,
          temperature: 0.7
        });

        const uniqueTitle = titleResponse.choices[0].message.content.replace(/["']/g, '').trim();

        // –®–ê–ì 2: –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
        console.log('   ‚úçÔ∏è –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏...');
        
        const textPrompt = `
–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ —Å–º—ã—Å–ª, –Ω–æ –∏–∑–º–µ–Ω–∏–≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏ —Å—Ç–∏–ª—å.
–°—Ç–∞—Ä–∞–π—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞.

–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:
"${originalText.substring(0, 2000)}"

–£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:
        `;

        const textResponse = await openai.chat.completions.create({
          model: AI_MODEL,
          messages: [{ role: "user", content: textPrompt }],
          max_tokens: 2500,
          temperature: 0.8
        });

        const uniqueText = textResponse.choices[0].message.content;
        const uniqueWordCount = uniqueText.split(/\s+/).length;

        console.log(`   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${originalWordCount} ‚Üí ${uniqueWordCount} —Å–ª–æ–≤`);

        // –®–ê–ì 3: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é
        console.log('   üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é...');
        
        const analysisPrompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Å—Ç–∞—Ç—å—é –∏ –≤—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.

–¢–µ–∫—Å—Ç: "${uniqueText.substring(0, 1000)}"

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–¢–µ–º—ã: —Ç–µ–º–∞1, —Ç–µ–º–∞2, —Ç–µ–º–∞3
–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è/–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è
        `;

        const analysisResponse = await openai.chat.completions.create({
          model: AI_MODEL,
          messages: [{ role: "user", content: analysisPrompt }],
          max_tokens: 200,
          temperature: 0.3
        });

        const analysis = analysisResponse.choices[0].message.content;
        const themes = extractThemes(analysis);
        const tone = extractTone(analysis);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
        newWorksheet.addRow({
          number: i - 1,
          original_title: originalTitle,
          unique_title: uniqueTitle,
          themes: themes.join(', '),
          tone: tone,
          original_words: originalWordCount,
          unique_words: uniqueWordCount,
          status: '‚úÖ –£—Å–ø–µ—à–Ω–æ'
        });

        processedCount++;
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${uniqueTitle}`);
        console.log(`   üéØ –¢–µ–º—ã: ${themes.join(', ')}`);
        console.log(`   üé≠ –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${tone}`);

        // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));

      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        failedCount++;
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    // 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await newWorkbook.xlsx.writeFile(outputPath);
    
    console.log('\nüéâ ====== –†–ï–ó–£–õ–¨–¢–ê–¢–´ AI –û–ë–†–ê–ë–û–¢–ö–ò ======');
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${processedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${failedCount}`);
    console.log(`üìÅ –§–∞–π–ª: ${outputPath}`);
    console.log(`üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $0.02 - $0.05`);

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function extractThemes(analysis) {
  try {
    const themesMatch = analysis.match(/–¢–µ–º—ã[:\s]*([^\n]+)/i);
    return themesMatch ? themesMatch[1].split(',').slice(0, 3).map(t => t.trim()) : ['–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'];
  } catch (e) {
    return ['—Å–µ–º—å—è', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è'];
  }
}

function extractTone(analysis) {
  try {
    const toneMatch = analysis.match(/–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å[:\s]*([^\n]+)/i);
    return toneMatch ? toneMatch[1].trim() : '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è';
  } catch (e) {
    return '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è';
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
processArticles();