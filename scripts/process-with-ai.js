// scripts/process-with-ai.js - –ö–ê–ß–ï–°–¢–í–ï–ù–ù–ê–Ø AI –û–ë–†–ê–ë–û–¢–ö–ê
const { OpenAI } = require('openai');
const fs = require('fs').promises;
const path = require('path');
const ExcelJS = require('exceljs');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

const AI_MODEL = "gpt-3.5-turbo";

console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ö–ê–ß–ï–°–¢–í–ï–ù–ù–£–Æ AI –æ–±—Ä–∞–±–æ—Ç–∫—É...');

async function processArticles() {
  try {
    if (!process.env.OPENAI_API_KEY) {
      console.log('‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }

    const inputPath = path.join(__dirname, '../results/–°—Ç–∞—Ç—å–∏ –î–∑–µ–Ω/–ù–∞—Ä–æ—á–Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—à—å/–ù–∞—Ä–æ—á–Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—à—å_articles.xlsx');
    
    console.log('üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç—å—è–º–∏...');
    await fs.access(inputPath);
    console.log('‚úÖ –§–∞–π–ª —Å–æ —Å—Ç–∞—Ç—å–µ–π –Ω–∞–π–¥–µ–Ω!');

    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(inputPath);
    const worksheet = workbook.getWorksheet('Articles');
    const totalArticles = worksheet.rowCount - 1;
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${totalArticles}`);

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const outputDir = path.join(__dirname, '../processed');
    await fs.mkdir(outputDir, { recursive: true });
    const outputPath = path.join(outputDir, '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ_—Å—Ç–∞—Ç—å–∏.xlsx');
    
    const newWorkbook = new ExcelJS.Workbook();
    const newWorksheet = newWorkbook.addWorksheet('–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏');

    // –°—Ç–æ–ª–±—Ü—ã —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    newWorksheet.columns = [
      { header: '‚Ññ', key: 'number', width: 5 },
      { header: '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', key: 'original_title', width: 35 },
      { header: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', key: 'unique_title', width: 35 },
      { header: '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç', key: 'original_text', width: 80 },
      { header: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç', key: 'unique_text', width: 80 },
      { header: '–û—Ä–∏–≥. —Å–ª–æ–≤', key: 'original_words', width: 12 },
      { header: '–£–Ω–∏–∫. —Å–ª–æ–≤', key: 'unique_words', width: 12 },
      { header: '–†–∞–∑–Ω–∏—Ü–∞', key: 'difference', width: 15 },
      { header: '–°—Ç–∞—Ç—É—Å', key: 'status', width: 20 }
    ];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 1 —Å—Ç–∞—Ç—å—é –¥–ª—è —Ç–µ—Å—Ç–∞
    let processedCount = 0;
    const maxArticles = 1;

    for (let i = 2; i <= Math.min(worksheet.rowCount, maxArticles + 1); i++) {
      const row = worksheet.getRow(i);
      const originalTitle = row.getCell(1).value;
      const originalText = row.getCell(2).value;
      
      if (!originalTitle || !originalText) continue;

      const originalWordCount = originalText.split(/\s+/).length;
      console.log(`\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: "${originalTitle.substring(0, 50)}..."`);
      console.log(`   üìä –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: ${originalWordCount} —Å–ª–æ–≤`);

      try {
        // –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê
        const qualityPrompt = `
–¢–´: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä
–ó–ê–î–ê–ß–ê: —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏
–¶–ï–õ–¨: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é –∏ –æ–±—ä–µ–º, –Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ù–û–í–û–ú–£ –¢–ï–ö–°–¢–£:
1. –°–æ—Ö—Ä–∞–Ω–∏ –û–°–ù–û–í–ù–£–Æ –ò–î–ï–Æ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
2. –°–æ—Ö—Ä–∞–Ω–∏ –ü–†–ò–ú–ï–†–ù–û –¢–û–¢ –ñ–ï –û–ë–™–ï–ú —Å–ª–æ–≤ (¬±15%)
3. –ò–ó–ú–ï–ù–ò –ø–æ–ª–Ω–æ—Å—Ç—å—é: —Å—é–∂–µ—Ç, –∏–º–µ–Ω–∞ –≥–µ—Ä–æ–µ–≤, –ª–æ–∫–∞—Ü–∏–∏, –¥–∏–∞–ª–æ–≥–∏
4. –î–û–ë–ê–í–¨ –Ω–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏, –ø—Ä–∏–º–µ—Ä—ã, —ç–º–æ—Ü–∏–∏
5. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ï–°–¢–ï–°–¢–í–ï–ù–ù–´–ú –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º
6. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–∂–∞—Ç—å —Å—É—Ç—å, –Ω–æ –±—ã—Ç—å –¥—Ä—É–≥–∏–º

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–ó–ê–ì–û–õ–û–í–û–ö: [–Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫]
–¢–ï–ö–°–¢: [–ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç]

–ò–°–•–û–î–ù–´–ô –ú–ê–¢–ï–†–ò–ê–õ:
–ó–ê–ì–û–õ–û–í–û–ö: "${originalTitle}"
–¢–ï–ö–°–¢: "${originalText.substring(0, 3000)}"
`;

        console.log('   ‚úçÔ∏è –°–æ–∑–¥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...');
        
        const response = await openai.chat.completions.create({
          model: AI_MODEL,
          messages: [{ role: "user", content: qualityPrompt }],
          max_tokens: 4000,
          temperature: 0.8
        });

        const result = response.choices[0].message.content;
        
        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const uniqueTitle = extractValue(result, '–ó–ê–ì–û–õ–û–í–û–ö');
        const uniqueText = extractValue(result, '–¢–ï–ö–°–¢');
        const uniqueWordCount = uniqueText.split(/\s+/).length;
        
        const diffPercent = Math.round((uniqueWordCount - originalWordCount) / originalWordCount * 100);
        const volumeStatus = Math.abs(diffPercent) <= 15 ? '‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω' : `‚ö†Ô∏è ${diffPercent}%`;

        console.log(`   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${originalWordCount} ‚Üí ${uniqueWordCount} —Å–ª–æ–≤ (${volumeStatus})`);
        console.log(`   üéØ –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${uniqueTitle}`);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        newWorksheet.addRow({
          number: i - 1,
          original_title: originalTitle,
          unique_title: uniqueTitle,
          original_text: originalText.substring(0, 1500) + (originalText.length > 1500 ? '...' : ''),
          unique_text: uniqueText,
          original_words: originalWordCount,
          unique_words: uniqueWordCount,
          difference: volumeStatus,
          status: '‚úÖ –£—Å–ø–µ—à–Ω–æ'
        });

        processedCount++;
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.`);

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));

      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await newWorkbook.xlsx.writeFile(outputPath);
    
    console.log('\nüéâ ====== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò ======');
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${processedCount}`);
    console.log(`üìÅ –§–∞–π–ª: ${outputPath}`);

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function extractValue(text, key) {
  const regex = new RegExp(`${key}:\\s*([^\\n]+)`, 'i');
  const match = text.match(regex);
  return match ? match[1].trim() : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
processArticles();